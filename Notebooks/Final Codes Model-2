{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Preprocessing-Model-2","provenance":[],"collapsed_sections":[],"machine_shape":"hm","mount_file_id":"138dGMLEuqH9Sn5S93a6p22IrQ0_jhtUD","authorship_tag":"ABX9TyN8ueGyRDi1S4q4C0hw0DJ0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"brDPD_4fqiex","colab_type":"text"},"source":["## Imports"]},{"cell_type":"code","metadata":{"id":"jmFm--51VhCn","colab_type":"code","colab":{}},"source":["from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","import os\n","\n","# 1. Authenticate and create the PyDrive client.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dCsxR-aQVpZZ","colab_type":"code","outputId":"f71d373f-0eb6-4924-886a-96e637e448ec","executionInfo":{"status":"ok","timestamp":1588782442704,"user_tz":240,"elapsed":24130,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":201}},"source":["!pip install Unidecode\n","import pandas as pd\n","import numpy as np\n","import re\n","import json\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import unidecode\n","import nltk\n","nltk.download('stopwords')\n","from nltk.corpus import stopwords\n","from bs4 import BeautifulSoup\n","import pickle\n","from collections import Counter\n","from html.parser import HTMLParser\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","%matplotlib inline"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting Unidecode\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d0/42/d9edfed04228bacea2d824904cae367ee9efd05e6cce7ceaaedd0b0ad964/Unidecode-1.1.1-py2.py3-none-any.whl (238kB)\n","\r\u001b[K     |█▍                              | 10kB 21.8MB/s eta 0:00:01\r\u001b[K     |██▊                             | 20kB 1.7MB/s eta 0:00:01\r\u001b[K     |████▏                           | 30kB 2.0MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 40kB 1.6MB/s eta 0:00:01\r\u001b[K     |██████▉                         | 51kB 1.9MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 61kB 2.2MB/s eta 0:00:01\r\u001b[K     |█████████▋                      | 71kB 2.4MB/s eta 0:00:01\r\u001b[K     |███████████                     | 81kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████▍                   | 92kB 2.8MB/s eta 0:00:01\r\u001b[K     |█████████████▊                  | 102kB 2.7MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 112kB 2.7MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 122kB 2.7MB/s eta 0:00:01\r\u001b[K     |█████████████████▉              | 133kB 2.7MB/s eta 0:00:01\r\u001b[K     |███████████████████▎            | 143kB 2.7MB/s eta 0:00:01\r\u001b[K     |████████████████████▋           | 153kB 2.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 163kB 2.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████▍        | 174kB 2.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 184kB 2.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 194kB 2.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 204kB 2.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▉   | 215kB 2.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 225kB 2.7MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▋| 235kB 2.7MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 245kB 2.7MB/s \n","\u001b[?25hInstalling collected packages: Unidecode\n","Successfully installed Unidecode-1.1.1\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"},{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8cQKsUNBaJcX","colab_type":"code","outputId":"de9a3205-b0d4-4367-b0ce-3a16a96ab6c3","executionInfo":{"status":"ok","timestamp":1588782452149,"user_tz":240,"elapsed":33565,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":598}},"source":["from __future__ import print_function\n","import tensorflow as tf\n","import keras\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from sklearn.utils import class_weight\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten, Conv1D, MaxPooling1D, GlobalMaxPool1D, Bidirectional, LSTM  \n","from keras.layers import Embedding\n","from keras.models import Model\n","from keras.utils import to_categorical\n","from keras.optimizers import Adam\n","from tensorflow.python.client import device_lib\n","print(device_lib.list_local_devices())"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"stream","text":["[name: \"/device:CPU:0\"\n","device_type: \"CPU\"\n","memory_limit: 268435456\n","locality {\n","}\n","incarnation: 279979557285035297\n",", name: \"/device:XLA_CPU:0\"\n","device_type: \"XLA_CPU\"\n","memory_limit: 17179869184\n","locality {\n","}\n","incarnation: 1548528366141985369\n","physical_device_desc: \"device: XLA_CPU device\"\n",", name: \"/device:XLA_GPU:0\"\n","device_type: \"XLA_GPU\"\n","memory_limit: 17179869184\n","locality {\n","}\n","incarnation: 450339810638085943\n","physical_device_desc: \"device: XLA_GPU device\"\n",", name: \"/device:GPU:0\"\n","device_type: \"GPU\"\n","memory_limit: 15701463552\n","locality {\n","  bus_id: 1\n","  links {\n","  }\n","}\n","incarnation: 6216637101902843398\n","physical_device_desc: \"device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\"\n","]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"N1ry1ihLacdg","colab_type":"text"},"source":["## Loading Data"]},{"cell_type":"markdown","metadata":{"id":"_ygMq-5VnDva","colab_type":"text"},"source":["### Loading Train and Test data"]},{"cell_type":"code","metadata":{"id":"SjwNKlSwXPG1","colab_type":"code","colab":{}},"source":["col_specification = [(9, 11), (11, 30000)]\n","data_raw = pd.read_fwf(r\"/content/drive/My Drive/MS AI Project/Data/train.ft.txt\", \n","                       colspecs=col_specification, header=None)\n","data_raw.rename(columns={0:'Sentiment', 1:'Review'}, inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dz-iyMuyabOX","colab_type":"code","outputId":"ec7ec809-6f1d-4f12-e411-0e2c5423f546","executionInfo":{"status":"ok","timestamp":1588782480501,"user_tz":240,"elapsed":61901,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":181}},"source":["data_raw.info()"],"execution_count":5,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 3600000 entries, 0 to 3599999\n","Data columns (total 2 columns):\n"," #   Column     Dtype \n","---  ------     ----- \n"," 0   Sentiment  int64 \n"," 1   Review     object\n","dtypes: int64(1), object(1)\n","memory usage: 54.9+ MB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"U8sV_ncHnKTj","colab_type":"text"},"source":["### Loading GloVe"]},{"cell_type":"code","metadata":{"id":"s_4XSHCtnOvn","colab_type":"code","colab":{}},"source":["# Load data (deserialize)\n","with open(r'/content/drive/My Drive/MS AI Project/Data/embeddings_index.pickle', 'rb') as handle:\n","    embeddings_index = pickle.load(handle)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RJnYqiABblti","colab_type":"text"},"source":["## Cleaning Data"]},{"cell_type":"code","metadata":{"id":"2N3ryCh5bqIZ","colab_type":"code","outputId":"20c36be8-844e-4759-a91a-d7433c94cb6a","executionInfo":{"status":"ok","timestamp":1588782489145,"user_tz":240,"elapsed":70530,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["data_raw.head()"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sentiment</th>\n","      <th>Review</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>Stuning even for the non-gamer: This sound tra...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>The best soundtrack ever to anything.: I'm rea...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Amazing!: This soundtrack is my favorite music...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>Excellent Soundtrack: I truly like this soundt...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>Remember, Pull Your Jaw Off The Floor After He...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Sentiment                                             Review\n","0          2  Stuning even for the non-gamer: This sound tra...\n","1          2  The best soundtrack ever to anything.: I'm rea...\n","2          2  Amazing!: This soundtrack is my favorite music...\n","3          2  Excellent Soundtrack: I truly like this soundt...\n","4          2  Remember, Pull Your Jaw Off The Floor After He..."]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"1sXcI2owbrxH","colab_type":"code","outputId":"01f915a1-7e6d-4ef9-b560-f7e88d301d41","executionInfo":{"status":"ok","timestamp":1588782489146,"user_tz":240,"elapsed":70523,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":291}},"source":["## Distribution of ratings\n","data_raw['Sentiment'].value_counts().plot(kind='bar')"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7471fe76a0>"]},"metadata":{"tags":[]},"execution_count":8},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"wjybUz3gbtwB","colab_type":"code","outputId":"6ac8ac8a-e2f9-4493-b9ba-7c15893d9ecc","executionInfo":{"status":"ok","timestamp":1588782489481,"user_tz":240,"elapsed":70851,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["## Checking Null values\n","data_raw.isna().sum()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Sentiment    0\n","Review       0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"zSHpXueNbwBn","colab_type":"code","colab":{}},"source":["## Caching words and creating a dictionary for faster removal of stopwords\n","stopwords = stopwords.words('english')\n","stopwords_dict = dict(Counter(stopwords))\n","\n","### Adding new words\n","stopwords_dict[\"i'd\"] = 1\n","stopwords_dict[\"i'll\"] = 1\n","\n","### removing these words as they help to convey negative sentiment\n","del stopwords_dict['not']\n","del stopwords_dict['no']\n","del stopwords_dict['nor']\n","\n","\n","## Loaded contracted words\n","file = open(r'/content/drive/My Drive/MS AI Project/Data/Contractions.json')\n","json_str = file.read()\n","contractions = json.loads(json_str)\n","\n","\n","## Data cleaning function\n","def data_processor(data, stopwords_dict=stopwords_dict, contractions=contractions):\n","  ## Dropping Null rows having null values in reviewText\n","  data_cleaned = data.loc[~data['Review'].isna()].copy()\n","  print(\"Finished removing null values...\")\n","\n","  ## Removing non-ascii characters\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: unidecode.unidecode(x))\n","\n","  ## Removing all the urls\n","  pattern = r\"((http|https)\\:\\/\\/)?[a-zA-Z0-9\\.\\/\\?\\:@\\-_=#]+\\.([a-zA-Z]){2,6}([a-zA-Z0-9\\.\\&\\/\\?\\:@\\-_=#])*\"\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: re.sub(pattern,' ', str(x)))\n","  print(\"Finished removing Links/Urls...\")\n","\n","  ## Removing HTML tags\n","  html_parser = HTMLParser()\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: html_parser.unescape(x))\n","  \n","  def remove_html_tags(text):\n","      \"\"\"remove html tags from text\"\"\"\n","      content = BeautifulSoup(text, \"html.parser\")\n","      stripped_text = content.get_text(separator=\" \")\n","      return stripped_text\n","\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: remove_html_tags(x))\n","  print(\"Finished removing HTML tags\")\n","\n","  ## Expanding words\n","  data_cleaned['Cleaned Text'] = data_cleaned['Review'].apply(lambda x: \n","                                            \" \".join([contractions[word] if word in contractions else word for word in x.split(\" \")]))\n","\n","  \n","  ## Removing all the puntuations & underscores\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: re.sub(r'[^\\w\\s\\']',' ', str(x)))\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: re.sub(r'[_]',' ', str(x)))\n","\n","  print(\"Finished removing punctuations...\")\n","\n","  ## Replacing all double spaces with single space\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: \n","                                                     \" \".join([word for word in x.split(\" \") if word != \"\"]))\n","  print(\"Finished removing extra spaces...\")\n","\n","  ## Removing new line characters\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: re.sub(r'\\n',' ', str(x)))\n","  print(\"Finished removing new line charaters...\")\n","\n","  ## Converting the review to lower case\n","  data_cleaned['Review'] = data_cleaned['Review'].apply(lambda x: x.lower())\n","  print(\"Converting to lower case...\")\n","\n","  ## Getting word count for each review \n","  data_cleaned['Word Count'] = data_cleaned['Review'].apply(lambda x: len(x.split(\" \")))\n","  print(\"Getting word count for each review...\")\n","\n","  ## Distribution of word count\n","  plt.figure(figsize=(12,8))\n","  sns.distplot(data_cleaned['Word Count'])\n","\n","  ## Removing stop words from text\n","  data_cleaned['Cleaned Text'] = data_cleaned['Review'].apply(\n","                                lambda x: \" \".join([word for word in x.split(\" \") if word.strip() not in stopwords_dict]))\n","  \n","  ## Final Word count\n","  data_cleaned['Final Word Count'] = data_cleaned['Cleaned Text'].apply(lambda x: len(x.split(\" \")))\n","  \n","  return data_cleaned"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZH6nhzLBcoXi","colab_type":"code","outputId":"0c4227a9-398e-4789-d3f6-1bb255e1839d","executionInfo":{"status":"ok","timestamp":1588783000577,"user_tz":240,"elapsed":581931,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":642}},"source":["data_cleaned = data_processor(data_raw)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Finished removing null values...\n","Finished removing Links/Urls...\n","Finished removing HTML tags\n","Finished removing punctuations...\n","Finished removing extra spaces...\n","Finished removing new line charaters...\n","Converting to lower case...\n","Getting word count for each review...\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"55FHx4yNn2wD","colab_type":"text"},"source":["### Yet more cleaning"]},{"cell_type":"code","metadata":{"id":"z-TukGT5nmUC","colab_type":"code","outputId":"d181e609-35b0-439e-eeb3-d7d5f9897dc3","executionInfo":{"status":"ok","timestamp":1588783042713,"user_tz":240,"elapsed":624055,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["### Removing reviews that have Gibberish words\n","data_cleaned['English Word Count'] = data_cleaned['Cleaned Text'].apply(lambda x: \n","                                                                        (sum([True for word in x.split(\" \") if word in embeddings_index.keys()])))\n","data_cleaned['Clean Ratio'] = data_cleaned['English Word Count']/data_cleaned['Final Word Count']\n","\n","print(f\"Removing {len(data_cleaned.loc[data_cleaned['Clean Ratio'] < 0.2])} reviews...\")\n","data_cleaned = data_cleaned.loc[~(data_cleaned['Clean Ratio'] < 0.2)].copy()"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Removing 49 reviews...\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XofN3Cpogc8e","colab_type":"text"},"source":["## Preparing data for Model"]},{"cell_type":"code","metadata":{"id":"A_wKZ0CigfvY","colab_type":"code","colab":{}},"source":["## Creating review and seniment list\n","review = list(data_cleaned['Cleaned Text'])\n","sentiment = list(data_cleaned['Sentiment'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"S_w7X7rQgiMU","colab_type":"code","colab":{}},"source":["## One-hot encoding Sentiment\n","sentiment_map = {1:0, 2:1}\n","sentiment_labels = list(map(sentiment_map.get, sentiment))\n","sentiment_labels = to_categorical(sentiment_labels)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UxFldzVEgk20","colab_type":"code","colab":{}},"source":["## Preparing tokenizer\n","tokener = Tokenizer()\n","tokener.fit_on_texts(review)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RMUDyKe8gmqT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"fd219e3c-0dee-4b69-a202-820e0b6820fa","executionInfo":{"status":"ok","timestamp":1588783182139,"user_tz":240,"elapsed":763460,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}}},"source":["## Setting vocab size\n","vocab_size = len(tokener.word_index) + 1\n","print(f\"Number of nuique words {vocab_size}\")"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Number of nuique words 1070266\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jlr_JW_ZgoN2","colab_type":"code","colab":{}},"source":["## Replacing words with interger index\n","encoded_review = tokener.texts_to_sequences(review)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cOx-aIxZgp2O","colab_type":"code","colab":{}},"source":["## Setting Maximum length and padding if necessary\n","max_length = 200\n","padded_review = pad_sequences(encoded_review, maxlen=max_length, padding='post', truncating='post')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EY4NISzpgrW_","colab_type":"code","colab":{}},"source":["## Creating the embedding matrix\n","embedding_matrix = np.zeros((vocab_size, 300))\n","for word, i in tokener.word_index.items():\n","    embedding_vector = embeddings_index.get(word)\n","    if embedding_vector is not None:\n","        embedding_matrix[i] = embedding_vector"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JuOWhfp1pI0_","colab_type":"code","colab":{}},"source":["del data_raw\n","del data_cleaned\n","del review\n","del sentiment"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3acLNgQUgxRy","colab_type":"text"},"source":["## Defining model and training"]},{"cell_type":"code","metadata":{"id":"_DrKOFaJgzJB","colab_type":"code","colab":{}},"source":["# # Define model - 24 Epochs - 0.9321\n","# model = Sequential(name='CNN-LSTM')\n","\n","# # Layer 1: Embedding layer\n","# model.add(Embedding(vocab_size, 300, weights=[embedding_matrix], input_length=max_length, trainable=False, name='embedding'))\n","\n","# # Layer 2: 1D Convolutional Layer\n","# model.add(Conv1D(filters = 100, kernel_size = 3, strides = 1, padding = 'valid', activation = 'relu'))\n","# # model.add(Conv1D(filters = 64, kernel_size = 3, strides = 1, padding = 'same', activation = 'relu'))\n","# model.add(MaxPooling1D(pool_size=3))\n","\n","# # Layer 3: Bi-Directional LSTM\n","# model.add(Bidirectional(LSTM(64, dropout=0.2, recurrent_dropout=0.2, return_sequences=True)))\n","# model.add(Bidirectional(LSTM(32, dropout=0.2, recurrent_dropout=0.2)))\n","\n","# # Layer 4: Output Layer\n","# model.add(Dense(2, activation = 'softmax'))\n","\n","# model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"af1FET6szd3F","colab_type":"code","colab":{}},"source":["# Define model\n","model = Sequential(name='CNN-LSTM')\n","\n","# Layer 1: Embedding layer\n","model.add(Embedding(vocab_size, 150, \n","                    # weights=[embedding_matrix], \n","                    input_length=max_length, \n","                    trainable=True, name='embedding'))\n","\n","# Layer 2: 1D Convolutional Layer\n","model.add(Conv1D(filters = 100, kernel_size = 5, strides = 1, padding = 'valid', activation = 'relu'))\n","# model.add(Conv1D(filters = 64, kernel_size = 3, strides = 1, padding = 'same', activation = 'relu'))\n","model.add(MaxPooling1D(pool_size=3))\n","\n","# Layer 3: Bi-Directional LSTM\n","model.add(Bidirectional(LSTM(64, dropout=0.2, recurrent_dropout=0.2, return_sequences=True)))\n","model.add(Bidirectional(LSTM(32, dropout=0.2, recurrent_dropout=0.2)))\n","\n","# Layer 4: Output Layer\n","model.add(Dense(2, activation = 'softmax'))\n","\n","model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V33Gf4uThfWT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":380},"outputId":"1943a8d0-9f9e-42dd-c22a-701ef005fe8b","executionInfo":{"status":"ok","timestamp":1588809828919,"user_tz":240,"elapsed":1141,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}}},"source":["model.summary()"],"execution_count":53,"outputs":[{"output_type":"stream","text":["Model: \"CNN-LSTM\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 200, 150)          160539900 \n","_________________________________________________________________\n","conv1d_3 (Conv1D)            (None, 196, 100)          75100     \n","_________________________________________________________________\n","max_pooling1d_3 (MaxPooling1 (None, 65, 100)           0         \n","_________________________________________________________________\n","bidirectional_5 (Bidirection (None, 65, 128)           84480     \n","_________________________________________________________________\n","bidirectional_6 (Bidirection (None, 64)                41216     \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 130       \n","=================================================================\n","Total params: 160,740,826\n","Trainable params: 160,740,826\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"d26sPvFpo9Bo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":399},"outputId":"440d1189-41cb-4f16-b865-d153fcd0ace8"},"source":["# Training the model\n","training_log = model.fit(padded_review, sentiment_labels, validation_split=0.05, batch_size=2048, epochs=50, verbose=1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 3419953 samples, validate on 179998 samples\n","Epoch 1/50\n","3419953/3419953 [==============================] - 895s 262us/step - loss: 0.2757 - accuracy: 0.8815 - val_loss: 0.2026 - val_accuracy: 0.9199\n","Epoch 2/50\n","3419953/3419953 [==============================] - 876s 256us/step - loss: 0.1931 - accuracy: 0.9252 - val_loss: 0.1887 - val_accuracy: 0.9263\n","Epoch 3/50\n","3419953/3419953 [==============================] - 881s 258us/step - loss: 0.1709 - accuracy: 0.9350 - val_loss: 0.1847 - val_accuracy: 0.9285\n","Epoch 4/50\n","3419953/3419953 [==============================] - 871s 255us/step - loss: 0.1532 - accuracy: 0.9429 - val_loss: 0.1876 - val_accuracy: 0.9281\n","Epoch 5/50\n","3419953/3419953 [==============================] - 885s 259us/step - loss: 0.1387 - accuracy: 0.9493 - val_loss: 0.1895 - val_accuracy: 0.9280\n","Epoch 6/50\n","3419953/3419953 [==============================] - 882s 258us/step - loss: 0.1237 - accuracy: 0.9556 - val_loss: 0.1974 - val_accuracy: 0.9264\n","Epoch 7/50\n","3419953/3419953 [==============================] - 875s 256us/step - loss: 0.1118 - accuracy: 0.9606 - val_loss: 0.2071 - val_accuracy: 0.9247\n","Epoch 8/50\n","3419953/3419953 [==============================] - 878s 257us/step - loss: 0.0997 - accuracy: 0.9655 - val_loss: 0.2239 - val_accuracy: 0.9213\n","Epoch 9/50\n","3419953/3419953 [==============================] - 877s 257us/step - loss: 0.0888 - accuracy: 0.9698 - val_loss: 0.2320 - val_accuracy: 0.9212\n","Epoch 10/50\n","2631680/3419953 [======================>.......] - ETA: 3:20 - loss: 0.0776 - accuracy: 0.9742"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qCMjOCbcQwy-","colab_type":"text"},"source":["## Evaluating model on Test set"]},{"cell_type":"markdown","metadata":{"id":"SOPB2WfpRRub","colab_type":"text"},"source":["### Loading Test data"]},{"cell_type":"code","metadata":{"id":"q9pYV47lQvPv","colab_type":"code","colab":{}},"source":["col_specification = [(9, 11), (11, 30000)]\n","test_data_raw = pd.read_fwf(r\"/content/drive/My Drive/MS AI Project/Data/test.ft.txt\", \n","                       colspecs=col_specification, header=None)\n","test_data_raw.rename(columns={0:'Sentiment', 1:'Review'}, inplace=True)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lGafvNRVRUnm","colab_type":"text"},"source":["### Preprocessing Test Data"]},{"cell_type":"code","metadata":{"id":"3_Wz_JOpQ_Il","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":642},"outputId":"869277fe-1e55-49b9-b6cc-aa9dd85a2340","executionInfo":{"status":"ok","timestamp":1588807018801,"user_tz":240,"elapsed":59602,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}}},"source":["data_test_cleaned = data_processor(test_data_raw)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Finished removing null values...\n","Finished removing Links/Urls...\n","Finished removing HTML tags\n","Finished removing punctuations...\n","Finished removing extra spaces...\n","Finished removing new line charaters...\n","Converting to lower case...\n","Getting word count for each review...\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"gmoY8KFjRkAJ","colab_type":"code","colab":{}},"source":["## Creating review and seniment list\n","review_test = list(data_test_cleaned['Cleaned Text'])\n","sentiment_test = list(data_test_cleaned['Sentiment'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AsBUZrXnSBUk","colab_type":"code","colab":{}},"source":["## One-hot encoding Sentiment\n","sentiment_map = {1:0, 2:1}\n","sentiment_test_labels = list(map(sentiment_map.get, sentiment_test))\n","sentiment_test_labels = to_categorical(sentiment_test_labels)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"f1INs9QOVlQ-","colab_type":"code","colab":{}},"source":["## Replacing words with interger index\n","encoded_review_test = tokener.texts_to_sequences(review_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rWGmDoEWVuX_","colab_type":"code","colab":{}},"source":["## Applying padding\n","padded_review_test = pad_sequences(encoded_review_test, maxlen=max_length, padding='post', truncating='post')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UtSrQFTDWCPo","colab_type":"text"},"source":["### Evaluating"]},{"cell_type":"code","metadata":{"id":"DAGSH0aUWCsi","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"60ed7433-4f4a-4ad9-d20f-4f03aa05822e","executionInfo":{"status":"ok","timestamp":1588808712773,"user_tz":240,"elapsed":486877,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}}},"source":["loss, accuracy = model.evaluate(padded_review_test, sentiment_test_labels, use_multiprocessing=True)"],"execution_count":47,"outputs":[{"output_type":"stream","text":["400000/400000 [==============================] - 486s 1ms/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"T85w52NBWHlw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"a588e9a4-5196-4101-87f3-0f1653f147c8","executionInfo":{"status":"ok","timestamp":1588808780906,"user_tz":240,"elapsed":1203,"user":{"displayName":"Anunay Vivek Sanganal","photoUrl":"","userId":"10367548046959114765"}}},"source":["print(f\"The test e\\accuracy is {accuracy}\")"],"execution_count":48,"outputs":[{"output_type":"stream","text":["The test e\u0007ccuracy is 0.9293825030326843\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CvO_q7lZYgc3","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}